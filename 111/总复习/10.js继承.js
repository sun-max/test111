// 封装：低耦合高内聚
// 多态：重载和重写
// 重载：方法名相同，形参个数或类型不一样。（js中不存在真正意义上的重载,js中重载指的是同一个方法，
// 根据传参不同，实现出不同的效果）
// function sun(x,y,z){
//     //arguments
//       if(typeof z==='undefined'){
//           return;
//       }
// }
// sum(1,2);
// sum(1,2,3);
// 重写：在类的继承中，子类可以重写父类中的方法；

// 你是怎么理解面向对象的：
// 什么是面向对象：1.面向对象是一种编程思想，js本身基于面向对象构建出来的
// (例如：js中有很多内置类,Promise就是es6中新增的一个内置类，我们就可以基于new promise来创建一个实例，
// 管理异步编程，我在项目中，promise也经常用，自己也研究过它的源码)。
// 我们平时用的vue react jquery也是基于面向对象构建出来，他们都是类，平时开发都是创建他们的实例来操作的。
// 封装的一些组件插件（自己封装的例如DIALOG，拖拽），也是面向对象开发的，这样可以创造不同的实例，来管理私有的属性和公有的方法。

/* 
  js中的面向对象，和其他编程语言略微不同的，js中类和实例是基于原型和原型链机制来处理的；而且js中
  类的重载，重写，继承也和其他语言不太一样。。。
*/

/*
  继承 ：子类继承父类中的属性和方法。（目的是：子类实例调取父类中的属性和方法）
  1.原型继承：让父类的属性和方法在子类实例的原型链上
  子类的原型指向父类的实例

  child.prototype=new Parent();
  child.prototype.constructor=child;
  特点：1.不像其他语言继承一样（其他语言是拷贝继承，也就是子类继承父类，
         会把父类中的属性和方法拷贝一份到子类中，供子类的实例调取使用）
         它是把父类的原型放到子类的原型链上。实例想调取这些方法，是基于__proto__原型链查找机制完成的。（查找式继承）
        2.子类可以重写父类中方法，会导致父类其他实例也受影响
        3.父类的私有或公有的属性方法，都会变为子类中公有的属性和方法。
        
*/
function A(x){
    this.x=x
}
A.prototype.getx=function(){
    console.log(this.x);
}

function B(y){
 this.y=y;
}
B.prototype=new A(200);
B.prototype.constructor=B
B.prototype.getY=function(){
    console.log(this.y);

}
let b1=new B(100);
b1.y;
b1.getY();
b1.getX();//
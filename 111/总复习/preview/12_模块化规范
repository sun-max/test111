AMD，CMD，commonjs UMD es6
前期没有模块化的时候，js文件十分庞大，于是按功能抽离划分为多个js文件
但是在html页面通过script的方式加载大量js文件会出现许多问题，例如文件之间的相互依赖问题，浏览器阻塞问题，
接着就有了模块化规范。
(1)AMD
是requirejs倡导的一种模块化规范，推崇依赖前置，在requirejs中模块通过define来进行定义，如果模块间相互依赖，需要将依赖
模块导入进来，待导入完毕之后，在通过回调函数的方式执行后面的代码，有效的解决了模块依赖的问题
(2)CMD
是seajs倡导的一种解决模块主机相互依赖规范，推崇依赖就近，在seajs中一个脚本就是一个模块，所有与的模块代码写在define
回调函数中，传递三个参数require，exports，module，通过使用module.exports(exports)对象向外暴露
require函数加载模块时，会自动拿到模块内部的module.exports对象

比较两者的异同?
相同：都是js模块化的异步加载方式
不同:可以看出AMD规范是在所有以来文件加载完成后才执行回调函数，cmd是按需加载，代码到了就加载

AMD缺点:
(1)前期模块初始化的时间较长(需要加载所有依赖文件)
(2)如果某一个依赖文件出错，会导致整个代码无法执行，资源浪费
(3)有时候加载的依赖项由于代码变更可能会没被用到（else，case分支），但是忘记修改，会造成资源浪费
优点：
提前加载依赖文件可以提前发现错误

CMD
优点：延迟按需加载，代码执行到了就加载，可节省资源（用不到的就不加载）
缺点：不能提前暴露错误，降低开发效率
如何提高网页的加载速度(浏览器加载页面的pending状态，怎么优化)
网页加载顺序：DNS解析-下载并渲染HTML文件-下载并执行css及js组件-下载图片

1.减少DNS查找
DNS查找，及浏览器根据url中域名，查找该域名对应的服务器IP地址，然后才能根据IP地址，下载到文件。
在DNS查找完成之前，所有文件下载都无法执行。每一次DNS查找时间约20-120ms
浏览器DNS查找顺序一般是这样的：浏览器缓存-系统缓存-路由器缓存-ISP DNS缓存-递归搜索
递归搜索：ISP的DNS服务器从根域名开始进行递归查询，查找时间一般为20-120ms

若没有DNS缓存，才会执行DNS递归搜索。但是显而易见，第一次访问网站首页时，是不会有DNS缓存的，必然会执行DNS查找。
而每一个DNS查找，需要耗时20-120ms。因此，减少DNS查找能加快网页加载速度。

实例：在开发页面时，很多时候，我们都要用到别人已经封装好了的js及css文件，譬如jquery库、angularjs库、时间选择插件、定位插件等等诸多插件，
一般而言，网上都有公用的CDN，我们不需要将这些文件下载到本地，就可以使用它们。但实际上，这样做会增加两个DNS查找，
即"ajax.googleapis.com"和"3gimg.qq.com"的DNS查找，将会在首次加载网站首页时，拖慢首页加载速度40-240ms，
而且每再增加一个DNS查找，还会额外拖慢20-120ms的加载时间，这是极为致命的。
因此，为了减少DNS查找，为了保障网站的安全，我们必须将网站所需的文件下载到本地，而不是调用别人支持的CDN。

2、css优先加载，js延迟加载
解析HTML文件，构建dom树时，一旦遇到link标记，即遇到css样式表，将其下载，便可立即构建渲染树，从而立即呈现页面效果。
但一旦遇到script标记，即遇到了js脚本，将立即阻塞dom树的创建，将控制权交给js引擎，等到js引擎运行完毕时，浏览器才会从中断的地方恢复渲染树的创建。
若将引入的js脚本链接放到HTML页面底部，那么在加载该页面时，一旦遇到js，页面渲染就会停滞，出现一段时间的灰色空白，直到js加载完毕，才会出现页面内容，
这对用户体验很不友好，需要将js脚本放置到页面底部，或者让js脚本异步或是延迟加载。
从严格意义上来说，CSS的优先加载及JS的延迟加载并不能从根本上提升网页加载速度，但是它们能使网页更快被渲染出来，使页面内容逐步呈现，增加用户等待的耐心，提升用户体验。


3.减少http请求
HTTP请求，即客户端到服务器端的请求消息，包括资源请求、数据处理等。
一般而言，完成了DNS查找后，接下来便是进行HTTP请求，获取资源。首先下载HTML文件，然后解析HTML文件，根据HTML内容，获取CSS、JS及图片文件。
每一个CSS链接、JS链接以及图片链接都是一个HTTP请求。

每一个HTTP请求都需要花费额外的时间。因此，我们可以将一些可合并的资源进行合并，譬如将所有页面的css合并成一个style.css文件，
譬如将所有页面的js合并成一个function.js文件，再譬如将一批小图标利用ps合成一张图片（此手段效果最显著，也最常用）。
虽然有时文件会变大，但是在HTTP请求中，请求下载一个大小为100KB的资源文件，比请求下载两个大小为50KB的资源文件要快。

4.利用缓存
将CSS样式与JS脚本分离出来，形成CSS文件及JS文件，就能进入缓存，进而提高页面加载速度。
灵活使用cookie和localstorage。在使用接口时，灵活使用cookie和localstorage来缓存接口返回的信息，避免不必要的接口查询，从而提升页面加载速度。
譬如：在登录页面登录时，缓存好用户信息，设置过期时间。在进入用户个人中心页面时，若数据并未过期，可以直接从缓存中取用户信息，不必再调起接口去获取用户信息。

6. HTML文件代码优化

　　　　1. 避免使用空请求，包括空的href链接、空src链接。空链接本身无法请求成功，因此会把一个HTTP请求拖到超时，而且空链接会阻塞页面中其他资源的下载进程，会拖慢页面加载速度。譬如：<img src="" alt="">。

　　　　2. 根据项目大小，选择主要使用class还是id。id选择器优先级最高，访问速度最快。但是在html中每声明一个id，就会在JS底层声明一个全局变量，而全局变量的增多，将会拖慢JS中变量遍历的效率，若变量遍历达到十万次以上，就会出现较显著的延迟，而且容易造成全局变量污染。对于小项目，并无影响，但是对中大型项目来说，尤其是游戏项目，影响很大。个人推荐，当项目较小时，灵活使用class和id，当项目较大时，尽量少使用id。

　　　　3. 预先设定图片大小。在页面加载过程中，图片最后加载，若不对图片预设大小，当图片加载完成后，将会引起大量的重排，将会浪费浏览器资源及拖慢页面加载速度。

　　　　4. 尽量减少DOM元素的数量与层级。解析HTML时，标签的数量越多，标签的层级越深，浏览器解析构建DOM树的时间就越长，应尽可能的减少DOM元素的数量和层级。

　　　　5. 尽量避免使用table标签。浏览器对table标签的解析是全部生成后再一次性绘制的，因此会造成表格位置较长时间的空白，推荐使用ul及li标签绘制表格。

　　　　6. 使用异步加载iframe标签。浏览器加载iframe标签时，会阻塞父页面渲染树的构建及HTTP请求，因此尽量使用异步加载iframe。

　　　　等等…

　　7. CSS样式代码优化

　　　　1. 禁止使用样式表达式。CSS表达式从IE5起开始支持，但仅有IE支持。它的解析速度较慢，而且运算次数远比我们想象的要大，随意动动鼠标就能轻松达到上万次运算，会对页面性能造成影响。譬如："#myDiv{width:expression(document.body.offsetWidth - 110 + "px"); }"

 　　　　2. 优化关键选择器，去掉无效的父级选择器，尽量少在选择器末尾使用通配符。大多数人都认为，浏览器对CSS选择器的解析式从左往右进行的，譬如选择器："#myDiv ul li a"，大多数人会认为这个选择器效率极高，毕竟第一个ID #myDiv 就已经把范围限定了，先选择 #myDiv ，再在 #myDiv 下寻找 ul ，再一级一级往下，直到找到 a 标签，效率很高。事实上这是错的，浏览器对CSS选择器的解析式从右往左进行的。在上述选择器中，浏览器会先去寻找 a 标签，范围为全局，再在 a 标签的列表中，寻找父级标签是 li 标签的 a 标签，一直向上，直到最后，找到父级标签是 #myDiv ul li 的a标签。因此，效率并不像想象中那么高。显而易见，"#myDi a"选择器比"#myDiv ul li a"选择器效率要高得多。而通配符 a 的效率远比类选择器及id选择器低，若给 a 标签添加一个class myA ，构造新选择器："#myDiv .myA"，它的效率又远比"#myDi a"要高了。浏览器对CSS选择器的解析式从右往左进行，因此在选择器末尾最好使用类选择器，而不是通配符。CSS选择器效率问题详情请见：CSS选择器效率问题

 　　　　等等…

　　8. JS代码优化

　　　　1. ajax请求方法按需求选择get或是post，访问接口所花费的时间在页面加载时间中占很大的比重，而接口访问方法中，get方法远比post方法要快，因此按需选择接口访问方法很重要。

　　　　2. 减少全局变量，尽量使用局部变量。js中，全局变量运算速率远低于局部变量，速度差异达到上百倍，且全局变量越多，全局变量的查找速率便越慢。详情请见：减少全局变量对效率的提升

　　　　3. 减少对DOM的操作。js操作DOM将会引起页面的重绘及重排，需要花费时间及耗费浏览器资源。

　　　　等等…